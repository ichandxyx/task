// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/ichandxyx/task/ent/job"
	"github.com/ichandxyx/task/ent/predicate"
	"github.com/ichandxyx/task/ent/visit"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJob   = "Job"
	TypeVisit = "Visit"
)

// JobMutation represents an operation that mutates the Job nodes in the graph.
type JobMutation struct {
	config
	op            Op
	typ           string
	id            *int
	status        *string
	createdAt     *time.Time
	clearedFields map[string]struct{}
	visits        map[int]struct{}
	removedvisits map[int]struct{}
	clearedvisits bool
	done          bool
	oldValue      func(context.Context) (*Job, error)
	predicates    []predicate.Job
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows management of the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for the Job entity.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the ID field of the mutation.
func withJobID(id int) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *JobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatus sets the "status" field.
func (m *JobMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *JobMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *JobMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "createdAt" field.
func (m *JobMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *JobMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Job entity.
// If the Job object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JobMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *JobMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// AddVisitIDs adds the "visits" edge to the Visit entity by ids.
func (m *JobMutation) AddVisitIDs(ids ...int) {
	if m.visits == nil {
		m.visits = make(map[int]struct{})
	}
	for i := range ids {
		m.visits[ids[i]] = struct{}{}
	}
}

// ClearVisits clears the "visits" edge to the Visit entity.
func (m *JobMutation) ClearVisits() {
	m.clearedvisits = true
}

// VisitsCleared reports if the "visits" edge to the Visit entity was cleared.
func (m *JobMutation) VisitsCleared() bool {
	return m.clearedvisits
}

// RemoveVisitIDs removes the "visits" edge to the Visit entity by IDs.
func (m *JobMutation) RemoveVisitIDs(ids ...int) {
	if m.removedvisits == nil {
		m.removedvisits = make(map[int]struct{})
	}
	for i := range ids {
		m.removedvisits[ids[i]] = struct{}{}
	}
}

// RemovedVisits returns the removed IDs of the "visits" edge to the Visit entity.
func (m *JobMutation) RemovedVisitsIDs() (ids []int) {
	for id := range m.removedvisits {
		ids = append(ids, id)
	}
	return
}

// VisitsIDs returns the "visits" edge IDs in the mutation.
func (m *JobMutation) VisitsIDs() (ids []int) {
	for id := range m.visits {
		ids = append(ids, id)
	}
	return
}

// ResetVisits resets all changes to the "visits" edge.
func (m *JobMutation) ResetVisits() {
	m.visits = nil
	m.clearedvisits = false
	m.removedvisits = nil
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.status != nil {
		fields = append(fields, job.FieldStatus)
	}
	if m.createdAt != nil {
		fields = append(fields, job.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldStatus:
		return m.Status()
	case job.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldStatus:
		return m.OldStatus(ctx)
	case job.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case job.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JobMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldStatus:
		m.ResetStatus()
		return nil
	case job.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.visits != nil {
		edges = append(edges, job.EdgeVisits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeVisits:
		ids := make([]ent.Value, 0, len(m.visits))
		for id := range m.visits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvisits != nil {
		edges = append(edges, job.EdgeVisits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeVisits:
		ids := make([]ent.Value, 0, len(m.removedvisits))
		for id := range m.removedvisits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvisits {
		edges = append(edges, job.EdgeVisits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	switch name {
	case job.EdgeVisits:
		return m.clearedvisits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	switch name {
	case job.EdgeVisits:
		m.ResetVisits()
		return nil
	}
	return fmt.Errorf("unknown Job edge %s", name)
}

// VisitMutation represents an operation that mutates the Visit nodes in the graph.
type VisitMutation struct {
	config
	op            Op
	typ           string
	id            *int
	storeID       *string
	visitTime     *time.Time
	error         *string
	perimeter     *int
	addperimeter  *int
	imageURLs     *[]string
	clearedFields map[string]struct{}
	job           *int
	clearedjob    bool
	done          bool
	oldValue      func(context.Context) (*Visit, error)
	predicates    []predicate.Visit
}

var _ ent.Mutation = (*VisitMutation)(nil)

// visitOption allows management of the mutation configuration using functional options.
type visitOption func(*VisitMutation)

// newVisitMutation creates new mutation for the Visit entity.
func newVisitMutation(c config, op Op, opts ...visitOption) *VisitMutation {
	m := &VisitMutation{
		config:        c,
		op:            op,
		typ:           TypeVisit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVisitID sets the ID field of the mutation.
func withVisitID(id int) visitOption {
	return func(m *VisitMutation) {
		var (
			err   error
			once  sync.Once
			value *Visit
		)
		m.oldValue = func(ctx context.Context) (*Visit, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Visit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVisit sets the old Visit of the mutation.
func withVisit(node *Visit) visitOption {
	return func(m *VisitMutation) {
		m.oldValue = func(context.Context) (*Visit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VisitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VisitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *VisitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStoreID sets the "storeID" field.
func (m *VisitMutation) SetStoreID(s string) {
	m.storeID = &s
}

// StoreID returns the value of the "storeID" field in the mutation.
func (m *VisitMutation) StoreID() (r string, exists bool) {
	v := m.storeID
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "storeID" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldStoreID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "storeID" field.
func (m *VisitMutation) ResetStoreID() {
	m.storeID = nil
}

// SetVisitTime sets the "visitTime" field.
func (m *VisitMutation) SetVisitTime(t time.Time) {
	m.visitTime = &t
}

// VisitTime returns the value of the "visitTime" field in the mutation.
func (m *VisitMutation) VisitTime() (r time.Time, exists bool) {
	v := m.visitTime
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitTime returns the old "visitTime" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldVisitTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVisitTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVisitTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitTime: %w", err)
	}
	return oldValue.VisitTime, nil
}

// ResetVisitTime resets all changes to the "visitTime" field.
func (m *VisitMutation) ResetVisitTime() {
	m.visitTime = nil
}

// SetError sets the "error" field.
func (m *VisitMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *VisitMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldError(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *VisitMutation) ClearError() {
	m.error = nil
	m.clearedFields[visit.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *VisitMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[visit.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *VisitMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, visit.FieldError)
}

// SetPerimeter sets the "perimeter" field.
func (m *VisitMutation) SetPerimeter(i int) {
	m.perimeter = &i
	m.addperimeter = nil
}

// Perimeter returns the value of the "perimeter" field in the mutation.
func (m *VisitMutation) Perimeter() (r int, exists bool) {
	v := m.perimeter
	if v == nil {
		return
	}
	return *v, true
}

// OldPerimeter returns the old "perimeter" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldPerimeter(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPerimeter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPerimeter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPerimeter: %w", err)
	}
	return oldValue.Perimeter, nil
}

// AddPerimeter adds i to the "perimeter" field.
func (m *VisitMutation) AddPerimeter(i int) {
	if m.addperimeter != nil {
		*m.addperimeter += i
	} else {
		m.addperimeter = &i
	}
}

// AddedPerimeter returns the value that was added to the "perimeter" field in this mutation.
func (m *VisitMutation) AddedPerimeter() (r int, exists bool) {
	v := m.addperimeter
	if v == nil {
		return
	}
	return *v, true
}

// ClearPerimeter clears the value of the "perimeter" field.
func (m *VisitMutation) ClearPerimeter() {
	m.perimeter = nil
	m.addperimeter = nil
	m.clearedFields[visit.FieldPerimeter] = struct{}{}
}

// PerimeterCleared returns if the "perimeter" field was cleared in this mutation.
func (m *VisitMutation) PerimeterCleared() bool {
	_, ok := m.clearedFields[visit.FieldPerimeter]
	return ok
}

// ResetPerimeter resets all changes to the "perimeter" field.
func (m *VisitMutation) ResetPerimeter() {
	m.perimeter = nil
	m.addperimeter = nil
	delete(m.clearedFields, visit.FieldPerimeter)
}

// SetImageURLs sets the "imageURLs" field.
func (m *VisitMutation) SetImageURLs(s []string) {
	m.imageURLs = &s
}

// ImageURLs returns the value of the "imageURLs" field in the mutation.
func (m *VisitMutation) ImageURLs() (r []string, exists bool) {
	v := m.imageURLs
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURLs returns the old "imageURLs" field's value of the Visit entity.
// If the Visit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitMutation) OldImageURLs(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImageURLs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImageURLs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURLs: %w", err)
	}
	return oldValue.ImageURLs, nil
}

// ResetImageURLs resets all changes to the "imageURLs" field.
func (m *VisitMutation) ResetImageURLs() {
	m.imageURLs = nil
}

// SetJobID sets the "job" edge to the Job entity by id.
func (m *VisitMutation) SetJobID(id int) {
	m.job = &id
}

// ClearJob clears the "job" edge to the Job entity.
func (m *VisitMutation) ClearJob() {
	m.clearedjob = true
}

// JobCleared reports if the "job" edge to the Job entity was cleared.
func (m *VisitMutation) JobCleared() bool {
	return m.clearedjob
}

// JobID returns the "job" edge ID in the mutation.
func (m *VisitMutation) JobID() (id int, exists bool) {
	if m.job != nil {
		return *m.job, true
	}
	return
}

// JobIDs returns the "job" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// JobID instead. It exists only for internal usage by the builders.
func (m *VisitMutation) JobIDs() (ids []int) {
	if id := m.job; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJob resets all changes to the "job" edge.
func (m *VisitMutation) ResetJob() {
	m.job = nil
	m.clearedjob = false
}

// Op returns the operation name.
func (m *VisitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Visit).
func (m *VisitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VisitMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.storeID != nil {
		fields = append(fields, visit.FieldStoreID)
	}
	if m.visitTime != nil {
		fields = append(fields, visit.FieldVisitTime)
	}
	if m.error != nil {
		fields = append(fields, visit.FieldError)
	}
	if m.perimeter != nil {
		fields = append(fields, visit.FieldPerimeter)
	}
	if m.imageURLs != nil {
		fields = append(fields, visit.FieldImageURLs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VisitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case visit.FieldStoreID:
		return m.StoreID()
	case visit.FieldVisitTime:
		return m.VisitTime()
	case visit.FieldError:
		return m.Error()
	case visit.FieldPerimeter:
		return m.Perimeter()
	case visit.FieldImageURLs:
		return m.ImageURLs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VisitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case visit.FieldStoreID:
		return m.OldStoreID(ctx)
	case visit.FieldVisitTime:
		return m.OldVisitTime(ctx)
	case visit.FieldError:
		return m.OldError(ctx)
	case visit.FieldPerimeter:
		return m.OldPerimeter(ctx)
	case visit.FieldImageURLs:
		return m.OldImageURLs(ctx)
	}
	return nil, fmt.Errorf("unknown Visit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case visit.FieldStoreID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case visit.FieldVisitTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitTime(v)
		return nil
	case visit.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case visit.FieldPerimeter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPerimeter(v)
		return nil
	case visit.FieldImageURLs:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURLs(v)
		return nil
	}
	return fmt.Errorf("unknown Visit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VisitMutation) AddedFields() []string {
	var fields []string
	if m.addperimeter != nil {
		fields = append(fields, visit.FieldPerimeter)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VisitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case visit.FieldPerimeter:
		return m.AddedPerimeter()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case visit.FieldPerimeter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPerimeter(v)
		return nil
	}
	return fmt.Errorf("unknown Visit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VisitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(visit.FieldError) {
		fields = append(fields, visit.FieldError)
	}
	if m.FieldCleared(visit.FieldPerimeter) {
		fields = append(fields, visit.FieldPerimeter)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VisitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VisitMutation) ClearField(name string) error {
	switch name {
	case visit.FieldError:
		m.ClearError()
		return nil
	case visit.FieldPerimeter:
		m.ClearPerimeter()
		return nil
	}
	return fmt.Errorf("unknown Visit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VisitMutation) ResetField(name string) error {
	switch name {
	case visit.FieldStoreID:
		m.ResetStoreID()
		return nil
	case visit.FieldVisitTime:
		m.ResetVisitTime()
		return nil
	case visit.FieldError:
		m.ResetError()
		return nil
	case visit.FieldPerimeter:
		m.ResetPerimeter()
		return nil
	case visit.FieldImageURLs:
		m.ResetImageURLs()
		return nil
	}
	return fmt.Errorf("unknown Visit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VisitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.job != nil {
		edges = append(edges, visit.EdgeJob)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VisitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case visit.EdgeJob:
		if id := m.job; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VisitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VisitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VisitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedjob {
		edges = append(edges, visit.EdgeJob)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VisitMutation) EdgeCleared(name string) bool {
	switch name {
	case visit.EdgeJob:
		return m.clearedjob
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VisitMutation) ClearEdge(name string) error {
	switch name {
	case visit.EdgeJob:
		m.ClearJob()
		return nil
	}
	return fmt.Errorf("unknown Visit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VisitMutation) ResetEdge(name string) error {
	switch name {
	case visit.EdgeJob:
		m.ResetJob()
		return nil
	}
	return fmt.Errorf("unknown Visit edge %s", name)
}
