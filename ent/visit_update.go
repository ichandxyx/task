// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ichandxyx/task/ent/job"
	"github.com/ichandxyx/task/ent/predicate"
	"github.com/ichandxyx/task/ent/visit"
)

// VisitUpdate is the builder for updating Visit entities.
type VisitUpdate struct {
	config
	hooks    []Hook
	mutation *VisitMutation
}

// Where adds a new predicate for the VisitUpdate builder.
func (vu *VisitUpdate) Where(ps ...predicate.Visit) *VisitUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetStoreID sets the "storeID" field.
func (vu *VisitUpdate) SetStoreID(s string) *VisitUpdate {
	vu.mutation.SetStoreID(s)
	return vu
}

// SetVisitTime sets the "visitTime" field.
func (vu *VisitUpdate) SetVisitTime(t time.Time) *VisitUpdate {
	vu.mutation.SetVisitTime(t)
	return vu
}

// SetError sets the "error" field.
func (vu *VisitUpdate) SetError(s string) *VisitUpdate {
	vu.mutation.SetError(s)
	return vu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (vu *VisitUpdate) SetNillableError(s *string) *VisitUpdate {
	if s != nil {
		vu.SetError(*s)
	}
	return vu
}

// ClearError clears the value of the "error" field.
func (vu *VisitUpdate) ClearError() *VisitUpdate {
	vu.mutation.ClearError()
	return vu
}

// SetPerimeter sets the "perimeter" field.
func (vu *VisitUpdate) SetPerimeter(i int) *VisitUpdate {
	vu.mutation.ResetPerimeter()
	vu.mutation.SetPerimeter(i)
	return vu
}

// SetNillablePerimeter sets the "perimeter" field if the given value is not nil.
func (vu *VisitUpdate) SetNillablePerimeter(i *int) *VisitUpdate {
	if i != nil {
		vu.SetPerimeter(*i)
	}
	return vu
}

// AddPerimeter adds i to the "perimeter" field.
func (vu *VisitUpdate) AddPerimeter(i int) *VisitUpdate {
	vu.mutation.AddPerimeter(i)
	return vu
}

// ClearPerimeter clears the value of the "perimeter" field.
func (vu *VisitUpdate) ClearPerimeter() *VisitUpdate {
	vu.mutation.ClearPerimeter()
	return vu
}

// SetImageURLs sets the "imageURLs" field.
func (vu *VisitUpdate) SetImageURLs(s []string) *VisitUpdate {
	vu.mutation.SetImageURLs(s)
	return vu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (vu *VisitUpdate) SetJobID(id int) *VisitUpdate {
	vu.mutation.SetJobID(id)
	return vu
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (vu *VisitUpdate) SetNillableJobID(id *int) *VisitUpdate {
	if id != nil {
		vu = vu.SetJobID(*id)
	}
	return vu
}

// SetJob sets the "job" edge to the Job entity.
func (vu *VisitUpdate) SetJob(j *Job) *VisitUpdate {
	return vu.SetJobID(j.ID)
}

// Mutation returns the VisitMutation object of the builder.
func (vu *VisitUpdate) Mutation() *VisitMutation {
	return vu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (vu *VisitUpdate) ClearJob() *VisitUpdate {
	vu.mutation.ClearJob()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VisitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VisitUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VisitUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VisitUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VisitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visit.Table,
			Columns: visit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visit.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.StoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldStoreID,
		})
	}
	if value, ok := vu.mutation.VisitTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visit.FieldVisitTime,
		})
	}
	if value, ok := vu.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldError,
		})
	}
	if vu.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: visit.FieldError,
		})
	}
	if value, ok := vu.mutation.Perimeter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: visit.FieldPerimeter,
		})
	}
	if value, ok := vu.mutation.AddedPerimeter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: visit.FieldPerimeter,
		})
	}
	if vu.mutation.PerimeterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: visit.FieldPerimeter,
		})
	}
	if value, ok := vu.mutation.ImageURLs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: visit.FieldImageURLs,
		})
	}
	if vu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.JobTable,
			Columns: []string{visit.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.JobTable,
			Columns: []string{visit.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VisitUpdateOne is the builder for updating a single Visit entity.
type VisitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitMutation
}

// SetStoreID sets the "storeID" field.
func (vuo *VisitUpdateOne) SetStoreID(s string) *VisitUpdateOne {
	vuo.mutation.SetStoreID(s)
	return vuo
}

// SetVisitTime sets the "visitTime" field.
func (vuo *VisitUpdateOne) SetVisitTime(t time.Time) *VisitUpdateOne {
	vuo.mutation.SetVisitTime(t)
	return vuo
}

// SetError sets the "error" field.
func (vuo *VisitUpdateOne) SetError(s string) *VisitUpdateOne {
	vuo.mutation.SetError(s)
	return vuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableError(s *string) *VisitUpdateOne {
	if s != nil {
		vuo.SetError(*s)
	}
	return vuo
}

// ClearError clears the value of the "error" field.
func (vuo *VisitUpdateOne) ClearError() *VisitUpdateOne {
	vuo.mutation.ClearError()
	return vuo
}

// SetPerimeter sets the "perimeter" field.
func (vuo *VisitUpdateOne) SetPerimeter(i int) *VisitUpdateOne {
	vuo.mutation.ResetPerimeter()
	vuo.mutation.SetPerimeter(i)
	return vuo
}

// SetNillablePerimeter sets the "perimeter" field if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillablePerimeter(i *int) *VisitUpdateOne {
	if i != nil {
		vuo.SetPerimeter(*i)
	}
	return vuo
}

// AddPerimeter adds i to the "perimeter" field.
func (vuo *VisitUpdateOne) AddPerimeter(i int) *VisitUpdateOne {
	vuo.mutation.AddPerimeter(i)
	return vuo
}

// ClearPerimeter clears the value of the "perimeter" field.
func (vuo *VisitUpdateOne) ClearPerimeter() *VisitUpdateOne {
	vuo.mutation.ClearPerimeter()
	return vuo
}

// SetImageURLs sets the "imageURLs" field.
func (vuo *VisitUpdateOne) SetImageURLs(s []string) *VisitUpdateOne {
	vuo.mutation.SetImageURLs(s)
	return vuo
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (vuo *VisitUpdateOne) SetJobID(id int) *VisitUpdateOne {
	vuo.mutation.SetJobID(id)
	return vuo
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (vuo *VisitUpdateOne) SetNillableJobID(id *int) *VisitUpdateOne {
	if id != nil {
		vuo = vuo.SetJobID(*id)
	}
	return vuo
}

// SetJob sets the "job" edge to the Job entity.
func (vuo *VisitUpdateOne) SetJob(j *Job) *VisitUpdateOne {
	return vuo.SetJobID(j.ID)
}

// Mutation returns the VisitMutation object of the builder.
func (vuo *VisitUpdateOne) Mutation() *VisitMutation {
	return vuo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (vuo *VisitUpdateOne) ClearJob() *VisitUpdateOne {
	vuo.mutation.ClearJob()
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VisitUpdateOne) Select(field string, fields ...string) *VisitUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Visit entity.
func (vuo *VisitUpdateOne) Save(ctx context.Context) (*Visit, error) {
	var (
		err  error
		node *Visit
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VisitUpdateOne) SaveX(ctx context.Context) *Visit {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VisitUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VisitUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VisitUpdateOne) sqlSave(ctx context.Context) (_node *Visit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visit.Table,
			Columns: visit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visit.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Visit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visit.FieldID)
		for _, f := range fields {
			if !visit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.StoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldStoreID,
		})
	}
	if value, ok := vuo.mutation.VisitTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visit.FieldVisitTime,
		})
	}
	if value, ok := vuo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldError,
		})
	}
	if vuo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: visit.FieldError,
		})
	}
	if value, ok := vuo.mutation.Perimeter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: visit.FieldPerimeter,
		})
	}
	if value, ok := vuo.mutation.AddedPerimeter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: visit.FieldPerimeter,
		})
	}
	if vuo.mutation.PerimeterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: visit.FieldPerimeter,
		})
	}
	if value, ok := vuo.mutation.ImageURLs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: visit.FieldImageURLs,
		})
	}
	if vuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.JobTable,
			Columns: []string{visit.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.JobTable,
			Columns: []string{visit.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Visit{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
