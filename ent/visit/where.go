// Code generated by entc, DO NOT EDIT.

package visit

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ichandxyx/task/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StoreID applies equality check predicate on the "storeID" field. It's identical to StoreIDEQ.
func StoreID(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// VisitTime applies equality check predicate on the "visitTime" field. It's identical to VisitTimeEQ.
func VisitTime(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitTime), v))
	})
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldError), v))
	})
}

// Perimeter applies equality check predicate on the "perimeter" field. It's identical to PerimeterEQ.
func Perimeter(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerimeter), v))
	})
}

// StoreIDEQ applies the EQ predicate on the "storeID" field.
func StoreIDEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "storeID" field.
func StoreIDNEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "storeID" field.
func StoreIDIn(vs ...string) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "storeID" field.
func StoreIDNotIn(vs ...string) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDGT applies the GT predicate on the "storeID" field.
func StoreIDGT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreID), v))
	})
}

// StoreIDGTE applies the GTE predicate on the "storeID" field.
func StoreIDGTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreID), v))
	})
}

// StoreIDLT applies the LT predicate on the "storeID" field.
func StoreIDLT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreID), v))
	})
}

// StoreIDLTE applies the LTE predicate on the "storeID" field.
func StoreIDLTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreID), v))
	})
}

// StoreIDContains applies the Contains predicate on the "storeID" field.
func StoreIDContains(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreID), v))
	})
}

// StoreIDHasPrefix applies the HasPrefix predicate on the "storeID" field.
func StoreIDHasPrefix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreID), v))
	})
}

// StoreIDHasSuffix applies the HasSuffix predicate on the "storeID" field.
func StoreIDHasSuffix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreID), v))
	})
}

// StoreIDEqualFold applies the EqualFold predicate on the "storeID" field.
func StoreIDEqualFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreID), v))
	})
}

// StoreIDContainsFold applies the ContainsFold predicate on the "storeID" field.
func StoreIDContainsFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreID), v))
	})
}

// VisitTimeEQ applies the EQ predicate on the "visitTime" field.
func VisitTimeEQ(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitTime), v))
	})
}

// VisitTimeNEQ applies the NEQ predicate on the "visitTime" field.
func VisitTimeNEQ(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisitTime), v))
	})
}

// VisitTimeIn applies the In predicate on the "visitTime" field.
func VisitTimeIn(vs ...time.Time) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVisitTime), v...))
	})
}

// VisitTimeNotIn applies the NotIn predicate on the "visitTime" field.
func VisitTimeNotIn(vs ...time.Time) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVisitTime), v...))
	})
}

// VisitTimeGT applies the GT predicate on the "visitTime" field.
func VisitTimeGT(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisitTime), v))
	})
}

// VisitTimeGTE applies the GTE predicate on the "visitTime" field.
func VisitTimeGTE(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisitTime), v))
	})
}

// VisitTimeLT applies the LT predicate on the "visitTime" field.
func VisitTimeLT(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisitTime), v))
	})
}

// VisitTimeLTE applies the LTE predicate on the "visitTime" field.
func VisitTimeLTE(v time.Time) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisitTime), v))
	})
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldError), v))
	})
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldError), v))
	})
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldError), v...))
	})
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldError), v...))
	})
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldError), v))
	})
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldError), v))
	})
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldError), v))
	})
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldError), v))
	})
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldError), v))
	})
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldError), v))
	})
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldError), v))
	})
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldError)))
	})
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldError)))
	})
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldError), v))
	})
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldError), v))
	})
}

// PerimeterEQ applies the EQ predicate on the "perimeter" field.
func PerimeterEQ(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPerimeter), v))
	})
}

// PerimeterNEQ applies the NEQ predicate on the "perimeter" field.
func PerimeterNEQ(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPerimeter), v))
	})
}

// PerimeterIn applies the In predicate on the "perimeter" field.
func PerimeterIn(vs ...int) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPerimeter), v...))
	})
}

// PerimeterNotIn applies the NotIn predicate on the "perimeter" field.
func PerimeterNotIn(vs ...int) predicate.Visit {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Visit(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPerimeter), v...))
	})
}

// PerimeterGT applies the GT predicate on the "perimeter" field.
func PerimeterGT(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPerimeter), v))
	})
}

// PerimeterGTE applies the GTE predicate on the "perimeter" field.
func PerimeterGTE(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPerimeter), v))
	})
}

// PerimeterLT applies the LT predicate on the "perimeter" field.
func PerimeterLT(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPerimeter), v))
	})
}

// PerimeterLTE applies the LTE predicate on the "perimeter" field.
func PerimeterLTE(v int) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPerimeter), v))
	})
}

// PerimeterIsNil applies the IsNil predicate on the "perimeter" field.
func PerimeterIsNil() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPerimeter)))
	})
}

// PerimeterNotNil applies the NotNil predicate on the "perimeter" field.
func PerimeterNotNil() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPerimeter)))
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(JobInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Visit) predicate.Visit {
	return predicate.Visit(func(s *sql.Selector) {
		p(s.Not())
	})
}
