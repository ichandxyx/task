// Code generated by entc, DO NOT EDIT.

package visit

const (
	// Label holds the string label denoting the visit type in the database.
	Label = "visit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStoreID holds the string denoting the storeid field in the database.
	FieldStoreID = "store_id"
	// FieldVisitTime holds the string denoting the visittime field in the database.
	FieldVisitTime = "visit_time"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldPerimeter holds the string denoting the perimeter field in the database.
	FieldPerimeter = "perimeter"
	// FieldImageURLs holds the string denoting the imageurls field in the database.
	FieldImageURLs = "image_ur_ls"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// Table holds the table name of the visit in the database.
	Table = "visits"
	// JobTable is the table the holds the job relation/edge.
	JobTable = "visits"
	// JobInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInverseTable = "jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_visits"
)

// Columns holds all SQL columns for visit fields.
var Columns = []string{
	FieldID,
	FieldStoreID,
	FieldVisitTime,
	FieldError,
	FieldPerimeter,
	FieldImageURLs,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "visits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_visits",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
