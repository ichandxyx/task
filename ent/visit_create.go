// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ichandxyx/task/ent/job"
	"github.com/ichandxyx/task/ent/visit"
)

// VisitCreate is the builder for creating a Visit entity.
type VisitCreate struct {
	config
	mutation *VisitMutation
	hooks    []Hook
}

// SetStoreID sets the "storeID" field.
func (vc *VisitCreate) SetStoreID(s string) *VisitCreate {
	vc.mutation.SetStoreID(s)
	return vc
}

// SetVisitTime sets the "visitTime" field.
func (vc *VisitCreate) SetVisitTime(t time.Time) *VisitCreate {
	vc.mutation.SetVisitTime(t)
	return vc
}

// SetError sets the "error" field.
func (vc *VisitCreate) SetError(s string) *VisitCreate {
	vc.mutation.SetError(s)
	return vc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (vc *VisitCreate) SetNillableError(s *string) *VisitCreate {
	if s != nil {
		vc.SetError(*s)
	}
	return vc
}

// SetPerimeter sets the "perimeter" field.
func (vc *VisitCreate) SetPerimeter(i int) *VisitCreate {
	vc.mutation.SetPerimeter(i)
	return vc
}

// SetNillablePerimeter sets the "perimeter" field if the given value is not nil.
func (vc *VisitCreate) SetNillablePerimeter(i *int) *VisitCreate {
	if i != nil {
		vc.SetPerimeter(*i)
	}
	return vc
}

// SetImageURLs sets the "imageURLs" field.
func (vc *VisitCreate) SetImageURLs(s []string) *VisitCreate {
	vc.mutation.SetImageURLs(s)
	return vc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (vc *VisitCreate) SetJobID(id int) *VisitCreate {
	vc.mutation.SetJobID(id)
	return vc
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (vc *VisitCreate) SetNillableJobID(id *int) *VisitCreate {
	if id != nil {
		vc = vc.SetJobID(*id)
	}
	return vc
}

// SetJob sets the "job" edge to the Job entity.
func (vc *VisitCreate) SetJob(j *Job) *VisitCreate {
	return vc.SetJobID(j.ID)
}

// Mutation returns the VisitMutation object of the builder.
func (vc *VisitCreate) Mutation() *VisitMutation {
	return vc.mutation
}

// Save creates the Visit in the database.
func (vc *VisitCreate) Save(ctx context.Context) (*Visit, error) {
	var (
		err  error
		node *Visit
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VisitCreate) SaveX(ctx context.Context) *Visit {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (vc *VisitCreate) check() error {
	if _, ok := vc.mutation.StoreID(); !ok {
		return &ValidationError{Name: "storeID", err: errors.New("ent: missing required field \"storeID\"")}
	}
	if _, ok := vc.mutation.VisitTime(); !ok {
		return &ValidationError{Name: "visitTime", err: errors.New("ent: missing required field \"visitTime\"")}
	}
	if _, ok := vc.mutation.ImageURLs(); !ok {
		return &ValidationError{Name: "imageURLs", err: errors.New("ent: missing required field \"imageURLs\"")}
	}
	return nil
}

func (vc *VisitCreate) sqlSave(ctx context.Context) (*Visit, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VisitCreate) createSpec() (*Visit, *sqlgraph.CreateSpec) {
	var (
		_node = &Visit{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: visit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visit.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.StoreID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldStoreID,
		})
		_node.StoreID = value
	}
	if value, ok := vc.mutation.VisitTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: visit.FieldVisitTime,
		})
		_node.VisitTime = value
	}
	if value, ok := vc.mutation.Error(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: visit.FieldError,
		})
		_node.Error = &value
	}
	if value, ok := vc.mutation.Perimeter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: visit.FieldPerimeter,
		})
		_node.Perimeter = value
	}
	if value, ok := vc.mutation.ImageURLs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: visit.FieldImageURLs,
		})
		_node.ImageURLs = value
	}
	if nodes := vc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   visit.JobTable,
			Columns: []string{visit.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_visits = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VisitCreateBulk is the builder for creating many Visit entities in bulk.
type VisitCreateBulk struct {
	config
	builders []*VisitCreate
}

// Save creates the Visit entities in the database.
func (vcb *VisitCreateBulk) Save(ctx context.Context) ([]*Visit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Visit, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VisitCreateBulk) SaveX(ctx context.Context) []*Visit {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
